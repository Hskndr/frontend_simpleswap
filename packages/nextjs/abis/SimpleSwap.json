{
  "address": "0xED79BbAFED4fb2D0cfF8E26A442faDC75471FC09",
  "abi": [{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenA","type":"address"},{"indexed":true,"internalType":"address","name":"tokenB","type":"address"},{"indexed":true,"internalType":"address","name":"provider","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountA","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountB","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"liquidity","type":"uint256"}],"name":"LiquidityAdded","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenA","type":"address"},{"indexed":true,"internalType":"address","name":"tokenB","type":"address"},{"indexed":true,"internalType":"address","name":"provider","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountA","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountB","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"liquidity","type":"uint256"}],"name":"LiquidityRemoved","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":true,"internalType":"address","name":"user","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"}],"name":"Swap","type":"event"},{"anonymous":false,"inputs":[{"indexed":true,"internalType":"address","name":"tokenIn","type":"address"},{"indexed":true,"internalType":"address","name":"tokenOut","type":"address"},{"indexed":true,"internalType":"address","name":"sender","type":"address"},{"indexed":false,"internalType":"uint256","name":"amountIn","type":"uint256"},{"indexed":false,"internalType":"uint256","name":"amountOut","type":"uint256"},{"indexed":false,"internalType":"address","name":"recipient","type":"address"}],"name":"TokensSwapped","type":"event"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"amountADesired","type":"uint256"},{"internalType":"uint256","name":"amountBDesired","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"addLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"},{"internalType":"uint256","name":"liquidity","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"reserveIn","type":"uint256"},{"internalType":"uint256","name":"reserveOut","type":"uint256"}],"name":"getAmountOut","outputs":[{"internalType":"uint256","name":"amountOut","type":"uint256"}],"stateMutability":"pure","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"}],"name":"getPrice","outputs":[{"internalType":"uint256","name":"price","type":"uint256"}],"stateMutability":"view","type":"function"},{"inputs":[{"internalType":"address","name":"tokenA","type":"address"},{"internalType":"address","name":"tokenB","type":"address"},{"internalType":"uint256","name":"liquidity","type":"uint256"},{"internalType":"uint256","name":"amountAMin","type":"uint256"},{"internalType":"uint256","name":"amountBMin","type":"uint256"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"removeLiquidity","outputs":[{"internalType":"uint256","name":"amountA","type":"uint256"},{"internalType":"uint256","name":"amountB","type":"uint256"}],"stateMutability":"nonpayable","type":"function"},{"inputs":[{"internalType":"uint256","name":"amountIn","type":"uint256"},{"internalType":"uint256","name":"amountOutMin","type":"uint256"},{"internalType":"address[]","name":"path","type":"address[]"},{"internalType":"address","name":"to","type":"address"},{"internalType":"uint256","name":"deadline","type":"uint256"}],"name":"swapExactTokensForTokens","outputs":[],"stateMutability":"nonpayable","type":"function"}],
  "transactionHash": "0xcc673933e2540e3899c0ab1db0528fea70aeb5aa65b920bedf344baea7192e62",
  "receipt": {
    "to": null,
    "from": "0x5FB26eba84aE31e5ead13FA66fBA4F4e3787293A",
    "contractAddress": "0x73151e303094a04103FA05cBe89afc507c469280",
    "transactionIndex": 420,
    "gasUsed": "1020947",
    "logsBloom": "0x
    "blockHash": "0xe5b1a6ebd3cd56244dd5f942e169aef3604297ad170a8dbce271fc748e093f53",
    "transactionHash": "0xcc673933e2540e3899c0ab1db0528fea70aeb5aa65b920bedf344baea7192e62",
    "logs": [],
    "blockNumber": 8714723,
    "cumulativeGasUsed": "55294924",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "adad9443d935bc7071aaa77e5192af45",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"provider\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"name\":\"LiquidityRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"name\":\"Swap\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenIn\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"tokenOut\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"}],\"name\":\"TokensSwapped\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amountADesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBDesired\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"addLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reserveOut\",\"type\":\"uint256\"}],\"name\":\"getAmountOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"}],\"name\":\"getPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"price\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"tokenA\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"tokenB\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"liquidity\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountAMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountBMin\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"removeLiquidity\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountA\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountB\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin\",\"type\":\"uint256\"},{\"internalType\":\"address[]\",\"name\":\"path\",\"type\":\"address[]\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"name\":\"swapExactTokensForTokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"Hiskander Aguillon\",\"details\":\"Uses a simplified constant product formula without fees.\",\"kind\":\"dev\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountADesired\":\"Amount of token A desired to add\",\"amountAMin\":\"Minimum amount of token A to add (slippage protection)\",\"amountBDesired\":\"Amount of token B desired to add\",\"amountBMin\":\"Minimum amount of token B to add (slippage protection)\",\"deadline\":\"Time after which the transaction is invalid\",\"to\":\"Address to receive liquidity tokens\",\"tokenA\":\"Address of token A\",\"tokenB\":\"Address of token B\"},\"returns\":{\"amountA\":\"Actual amount of token A added\",\"amountB\":\"Actual amount of token B added\",\"liquidity\":\"Amount of liquidity tokens minted\"}},\"getAmountOut(uint256,uint256,uint256)\":{\"params\":{\"amountIn\":\"Amount of input tokens\",\"reserveIn\":\"Reserve of input token\",\"reserveOut\":\"Reserve of output token\"},\"returns\":{\"amountOut\":\"Calculated amount of output tokens\"}},\"getPrice(address,address)\":{\"params\":{\"tokenA\":\"Address of token A\",\"tokenB\":\"Address of token B\"},\"returns\":{\"price\":\"The price of 1 tokenA in tokenB units\"}},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"params\":{\"amountAMin\":\"Minimum amount of token A to receive (slippage protection)\",\"amountBMin\":\"Minimum amount of token B to receive (slippage protection)\",\"deadline\":\"Expiry time for the transaction\",\"liquidity\":\"Amount of liquidity tokens to burn\",\"to\":\"Recipient of the withdrawn tokens\",\"tokenA\":\"Address of token A\",\"tokenB\":\"Address of token B\"},\"returns\":{\"amountA\":\"Amount of token A returned\",\"amountB\":\"Amount of token B returned\"}},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"params\":{\"amountIn\":\"Amount of input tokens to send\",\"amountOutMin\":\"Minimum amount of output tokens to receive (slippage protection)\",\"deadline\":\"Time after which the transaction is invalid   \",\"path\":\"Array with exactly 2 elements: input token and output token addresses\",\"to\":\"Recipient of the output tokens\"}}},\"title\":\"SimpleSwap - A simple token swap and liquidity pool contract\",\"version\":1},\"userdoc\":{\"events\":{\"LiquidityAdded(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is added to a pool\"},\"LiquidityRemoved(address,address,address,uint256,uint256,uint256)\":{\"notice\":\"Emitted when liquidity is removed from a pool\"},\"Swap(address,address,address,uint256,uint256)\":{\"notice\":\"Emitted when a swap is executed\"},\"TokensSwapped(address,address,address,uint256,uint256,address)\":{\"notice\":\"Emitted when a swap is executed\"}},\"kind\":\"user\",\"methods\":{\"addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Add liquidity to the pool for a token pair\"},\"getAmountOut(uint256,uint256,uint256)\":{\"notice\":\"Calculates output amount given an input amount and reserves\"},\"getPrice(address,address)\":{\"notice\":\"Returns the price of tokenB in terms of tokenA (18 decimals)\"},\"removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)\":{\"notice\":\"Removes liquidity from a token pair pool and returns the tokens to the user\"},\"swapExactTokensForTokens(uint256,uint256,address[],address,uint256)\":{\"notice\":\"Swaps an exact amount of input tokens for as many output tokens as possible\"}},\"notice\":\"This contract allows users to add/remove liquidity and swap between two ERC20 tokens.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/SimpleSwap.sol\":\"SimpleSwap\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/SimpleSwap.sol\":{\"content\":\"/**\\n *Submitted for verification at Etherscan.io on 2025-07-06\\n*/\\n\\n// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IERC20 {\\n    function totalSupply() external view returns (uint);\\n    function balanceOf(address account) external view returns (uint);\\n    function transfer(address to, uint value) external returns (bool);\\n    function approve(address spender, uint value) external returns (bool);\\n    function transferFrom(address from, address to, uint value) external returns (bool);\\n}\\n\\n/// @title SimpleSwap - A simple token swap and liquidity pool contract\\n/// @author Hiskander Aguillon\\n/// @notice This contract allows users to add/remove liquidity and swap between two ERC20 tokens.\\n/// @dev Uses a simplified constant product formula without fees.\\ncontract SimpleSwap {\\n    struct Pool {\\n        uint reserveA; \\n        uint reserveB; \\n        uint totalLiquidity;\\n        mapping(address => uint) liquidity;\\n    }\\n\\n    mapping(bytes32 => Pool) internal pools;\\n\\n    /// @notice Emitted when liquidity is added to a pool\\n    event LiquidityAdded(\\n        address indexed tokenA, \\n        address indexed tokenB, \\n        address indexed provider,\\n        uint amountA, \\n        uint amountB, \\n        uint liquidity\\n        );\\n\\n    /// @notice Emitted when liquidity is removed from a pool\\n    event LiquidityRemoved(\\n        address indexed tokenA, \\n        address indexed tokenB, \\n        address indexed provider, \\n        uint amountA, \\n        uint amountB, \\n        uint liquidity);\\n\\n    /// @notice Emitted when a swap is executed\\n    event Swap(\\n        address indexed tokenIn, \\n        address indexed tokenOut, \\n        address indexed user, \\n        uint amountIn, \\n        uint amountOut\\n        );\\n\\n    /// @notice Emitted when a swap is executed\\n    event TokensSwapped(\\n        address indexed tokenIn,\\n        address indexed tokenOut,\\n        address indexed sender,\\n        uint amountIn,\\n        uint amountOut,\\n        address recipient\\n    );\\n\\n    /// @dev Modifier to check deadline for time-sensitive functions\\n    modifier ensure(uint deadline) {\\n        require(block.timestamp <= deadline, \\\"SimpleSwap: EXPIRED\\\");\\n        _;\\n    }\\n\\n    /// @dev Generates a unique identifier for a token pair\\n    function _pairKey(address tokenA, address tokenB) internal pure returns (bytes32) {\\n        return tokenA < tokenB \\n            ? keccak256(abi.encodePacked(tokenA, tokenB)) \\n            : keccak256(abi.encodePacked(tokenB, tokenA));\\n    }\\n\\n    /// @dev Ensures consistent token ordering\\n    function _sortTokens(address tokenA, address tokenB, uint amountA, uint amountB)\\n        internal pure returns (address, address, uint, uint)\\n    {\\n        return tokenA < tokenB \\n            ? (tokenA, tokenB, amountA, amountB)\\n            : (tokenB, tokenA, amountB, amountA);\\n    }\\n\\n    /// @notice Add liquidity to the pool for a token pair\\n    /// @param tokenA Address of token A\\n    /// @param tokenB Address of token B\\n    /// @param amountADesired Amount of token A desired to add\\n    /// @param amountBDesired Amount of token B desired to add\\n    /// @param amountAMin Minimum amount of token A to add (slippage protection)\\n    /// @param amountBMin Minimum amount of token B to add (slippage protection)\\n    /// @param to Address to receive liquidity tokens\\n    /// @param deadline Time after which the transaction is invalid\\n    /// @return amountA Actual amount of token A added\\n    /// @return amountB Actual amount of token B added\\n    /// @return liquidity Amount of liquidity tokens minted\\n    function addLiquidity(\\n            address tokenA,\\n            address tokenB,\\n            uint amountADesired,\\n            uint amountBDesired,\\n            uint amountAMin,\\n            uint amountBMin,\\n            address to,\\n            uint deadline\\n        ) external ensure(deadline) returns (uint amountA, uint amountB, uint liquidity) {\\n            require(tokenA != tokenB, \\\"IDENTICAL_ADDRESSES\\\");\\n            require(\\n                amountADesired >= amountAMin && amountBDesired >= amountBMin, \\\"INSUFFICIENT_AMOUNT\\\"\\n                );\\n\\n            (amountA, amountB, liquidity) = _addLiquidity(\\n                tokenA, tokenB, amountADesired, amountBDesired, to\\n                );\\n\\n            require(amountA >= amountAMin, \\\"SLIPPAGE_A\\\");\\n            require(amountB >= amountBMin, \\\"SLIPPAGE_B\\\");\\n\\n            emit LiquidityAdded(tokenA, tokenB, to, amountA, amountB, liquidity);\\n        }\\n\\n    /// @dev Internal function to handle liquidity adding logic\\n    function _addLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint amountADesired,\\n        uint amountBDesired,\\n        address to\\n        ) internal returns (uint amountA, uint amountB, uint liquidity) {\\n            ( , , uint aDesired, uint bDesired) = _sortTokens(\\n                tokenA, tokenB, amountADesired, amountBDesired\\n            );\\n        \\n        bytes32 key = _pairKey(tokenA, tokenB);\\n        Pool storage pool = pools[key];\\n        // local variables\\n        uint _reserveA = pool.reserveA;\\n        uint _reserveB = pool.reserveB;\\n        uint _totalLiquidity = pool.totalLiquidity;\\n\\n        if (_totalLiquidity == 0) {\\n            amountA = aDesired;\\n            amountB = bDesired;\\n            liquidity = sqrt(amountA * amountB);\\n        } else {\\n            uint ratioA = (aDesired * _reserveB) / _reserveA; \\n            require(ratioA <= bDesired, \\\"WRONG_RATIO\\\");\\n            amountA = aDesired;\\n            amountB = ratioA;\\n            liquidity = (amountA * _totalLiquidity) / _reserveA;\\n        }\\n\\n        // Transfer the actual amounts used, not desired (avoid excess transfer)\\n        IERC20(tokenA).transferFrom(msg.sender, address(this), amountA);\\n        IERC20(tokenB).transferFrom(msg.sender, address(this), amountB);\\n\\n        pool.reserveA += amountA;\\n        pool.reserveB += amountB;\\n        pool.totalLiquidity += liquidity;\\n        pool.liquidity[to] += liquidity;\\n    }\\n\\n    /// @notice Removes liquidity from a token pair pool and returns the tokens to the user\\n    /// @param tokenA Address of token A\\n    /// @param tokenB Address of token B\\n    /// @param liquidity Amount of liquidity tokens to burn\\n    /// @param amountAMin Minimum amount of token A to receive (slippage protection)\\n    /// @param amountBMin Minimum amount of token B to receive (slippage protection)\\n    /// @param to Recipient of the withdrawn tokens\\n    /// @param deadline Expiry time for the transaction\\n    /// @return amountA Amount of token A returned\\n    /// @return amountB Amount of token B returned\\n    function removeLiquidity(\\n            address tokenA,\\n            address tokenB,\\n            uint liquidity,\\n            uint amountAMin,\\n            uint amountBMin,\\n            address to,\\n            uint deadline\\n        ) external ensure(deadline) returns (uint amountA, uint amountB) {\\n        \\n        (amountA, amountB) = _removeLiquidity(\\n            tokenA, tokenB, liquidity, amountAMin, amountBMin, to\\n        );\\n\\n        emit LiquidityRemoved(tokenA, tokenB, msg.sender, amountA, amountB, liquidity);\\n    }\\n\\n    /// @dev Internal function that handles the liquidity removal logic\\n    function _removeLiquidity(\\n        address tokenA,\\n        address tokenB,\\n        uint liquidity,\\n        uint amountAMin,\\n        uint amountBMin,\\n        address to\\n        ) internal returns (uint amountA, uint amountB) {\\n\\n        bytes32 key = _pairKey(tokenA, tokenB);\\n        Pool storage pool = pools[key];\\n\\n        // Local variables\\n        uint _reserveA = pool.reserveA;\\n        uint _reserveB = pool.reserveB;\\n        uint _totalLiquidity = pool.totalLiquidity;\\n\\n        require(pool.liquidity[msg.sender] >= liquidity, \\\"INSUFFICIENT_LIQUIDITY\\\");\\n\\n        amountA = (liquidity * _reserveA) / _totalLiquidity;\\n        amountB = (liquidity * _reserveB) / _totalLiquidity;\\n\\n        require(amountA >= amountAMin, \\\"SLIPPAGE_A\\\");\\n        require(amountB >= amountBMin, \\\"SLIPPAGE_B\\\");\\n\\n        // State updates\\n        pool.reserveA -= amountA;\\n        pool.reserveB -= amountB;\\n        pool.totalLiquidity -= liquidity;\\n        pool.liquidity[msg.sender] -= liquidity;\\n\\n        // Transfers\\n        IERC20(tokenA).transfer(to, amountA);\\n        IERC20(tokenB).transfer(to, amountB);\\n    }\\n\\n    /// @notice Swaps an exact amount of input tokens for as many output tokens as possible\\n    /// @param amountIn Amount of input tokens to send\\n    /// @param amountOutMin Minimum amount of output tokens to receive (slippage protection)\\n    /// @param path Array with exactly 2 elements: input token and output token addresses\\n    /// @param to Recipient of the output tokens\\n    /// @param deadline Time after which the transaction is invalid   \\n    function swapExactTokensForTokens(\\n            uint256 amountIn,\\n            uint256 amountOutMin,\\n            address[] calldata path,\\n            address to,\\n            uint256 deadline\\n        ) external ensure(deadline) {\\n            require(path.length == 2, \\\"SimpleSwap: INVALID_PATH\\\");\\n            _swap(amountIn, amountOutMin, path[0], path[1], to);\\n        }\\n\\n    /// @dev Executes the internal logic for a token swap\\n    /// @param amountIn Amount of input token sent\\n    /// @param amountOutMin Minimum amount of output token required\\n    /// @param tokenIn Address of input token\\n    /// @param tokenOut Address of output token\\n    /// @param to Recipient of the output tokens\\n    function _swap(\\n            uint256 amountIn,\\n            uint256 amountOutMin,\\n            address tokenIn,\\n            address tokenOut,\\n            address to\\n        ) internal {\\n\\n            bytes32 key = _pairKey(tokenIn, tokenOut);\\n            Pool storage pool = pools[key];\\n\\n            // Local variables\\n            uint _reserveA = pool.reserveA;\\n            uint _reserveB = pool.reserveB;\\n\\n      \\n            (uint amountOut) = _executeSwap(amountIn, amountOutMin, tokenIn, tokenOut, to, _reserveA, _reserveB, pool);\\n\\n            emit TokensSwapped(tokenIn, tokenOut, msg.sender, amountIn, amountOut, to);\\n        }\\n\\n    /// @dev Internal function to _swap\\n    function _executeSwap(\\n            uint256 amountIn,\\n            uint256 amountOutMin,\\n            address tokenIn,\\n            address tokenOut,\\n            address to,\\n            uint256 _reserveA,\\n            uint256 _reserveB,\\n            Pool storage pool\\n        ) internal returns (uint amountOut) {\\n              \\n        uint reserveIn;\\n        uint reserveOut;\\n\\n        bool isTokenInFirst = tokenIn < tokenOut;\\n\\n        if (isTokenInFirst) {\\n            reserveIn = _reserveA;\\n            reserveOut = _reserveB;\\n        } else {\\n            reserveIn = _reserveB;\\n            reserveOut = _reserveA;\\n        }\\n\\n        amountOut = getAmountOut(amountIn, reserveIn, reserveOut);\\n        require(amountOut >= amountOutMin, \\\"INSUFFICIENT_OUTPUT\\\");\\n\\n        // Transfer tokens\\n        IERC20(tokenIn).transferFrom(msg.sender, address(this), amountIn);\\n        IERC20(tokenOut).transfer(to, amountOut);\\n\\n        // Update reserves (CEI pattern)\\n        if (isTokenInFirst) {\\n            pool.reserveA += amountIn;\\n            pool.reserveB -= amountOut;\\n        } else {\\n            pool.reserveB += amountIn;\\n            pool.reserveA -= amountOut;\\n        }\\n    }\\n\\n    /// @notice Returns the price of tokenB in terms of tokenA (18 decimals)\\n    /// @param tokenA Address of token A\\n    /// @param tokenB Address of token B\\n    /// @return price The price of 1 tokenA in tokenB units\\n    function getPrice(address tokenA, address tokenB) external view returns (uint price) {\\n        bytes32 key = _pairKey(tokenA, tokenB);\\n        Pool storage pool = pools[key];\\n\\n        // Local variables\\n        uint _reserveA = pool.reserveA;\\n        uint _reserveB = pool.reserveB;\\n        \\n        (uint reserveA, uint reserveB) = tokenA < tokenB\\n            ? (_reserveA, _reserveB) \\n            : (_reserveB, _reserveA); \\n\\n        require(reserveA > 0, \\\"NO_LIQUIDITY\\\");\\n\\n        price = (reserveB * 1e18) / reserveA;\\n    }\\n\\n    /// @notice Calculates output amount given an input amount and reserves\\n    /// @param amountIn Amount of input tokens\\n    /// @param reserveIn Reserve of input token\\n    /// @param reserveOut Reserve of output token\\n    /// @return amountOut Calculated amount of output tokens\\n    function getAmountOut(\\n        uint amountIn, \\n        uint reserveIn, \\n        uint reserveOut\\n        ) public pure returns (uint amountOut) {\\n        require(reserveIn > 0 && reserveOut > 0, \\\"INVALID_RESERVES\\\");\\n\\n        amountOut = (amountIn * reserveOut) / (reserveIn + amountIn);\\n    }\\n\\n    /// @notice Calculates the integer square root of a number\\n    /// @dev Uses the Babylonian method for computing square root\\n    /// @param y Input value\\n    /// @return z Integer square root of input\\n    function sqrt(uint y) internal pure returns (uint z) {\\n        if (y > 3) {\\n            z = y;\\n            uint x = y / 2 + 1;\\n            while (x < z) {\\n                z = x;\\n                x = (y / x + x) / 2;\\n            }\\n        } else if (y != 0) {\\n            z = 1;\\n        }\\n    }\\n}\",\"keccak256\":\"0x5f4c7efe2c996094056ad94ef81aa1a0085070b0d16a03d80e9a2a3987e073c3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50611181806100206000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063054d50d41461005c57806338ed173914610082578063ac41865a14610097578063baa2abde146100aa578063e8e33700146100d2575b600080fd5b61006f61006a366004610e59565b610100565b6040519081526020015b60405180910390f35b610095610090366004610e9c565b61017b565b005b61006f6100a5366004610f3e565b610250565b6100bd6100b8366004610f71565b610304565b60408051928352602083019190915201610079565b6100e56100e0366004610fdb565b61039b565b60408051938452602084019290925290820152606001610079565b600080831180156101115750600082115b6101555760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f524553455256455360801b60448201526064015b60405180910390fd5b61015f8484611065565b6101698386611078565b610173919061108f565b949350505050565b808042111561019c5760405162461bcd60e51b815260040161014c906110b1565b600284146101ec5760405162461bcd60e51b815260206004820152601860248201527f53696d706c65537761703a20494e56414c49445f504154480000000000000000604482015260640161014c565b610247878787876000818110610204576102046110de565b905060200201602081019061021991906110f4565b8888600181811061022c5761022c6110de565b905060200201602081019061024191906110f4565b8761055b565b50505050505050565b60008061025d84846105f5565b60008181526020819052604081208054600182015493945090929091806001600160a01b03808916908a1610610294578284610297565b83835b91509150600082116102da5760405162461bcd60e51b815260206004820152600c60248201526b4e4f5f4c495155494449545960a01b604482015260640161014c565b816102ed82670de0b6b3a7640000611078565b6102f7919061108f565b9998505050505050505050565b60008082804211156103285760405162461bcd60e51b815260040161014c906110b1565b6103368a8a8a8a8a8a61069d565b60408051838152602081018390529081018b9052919450925033906001600160a01b038b811691908d16907fd765e08eef31c0983ecca03ecd166297ac485ecd5dd69e291c848f0a020333c19060600160405180910390a45097509795505050505050565b600080600083804211156103c15760405162461bcd60e51b815260040161014c906110b1565b8a6001600160a01b03168c6001600160a01b0316036104185760405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b604482015260640161014c565b878a101580156104285750868910155b61046a5760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b604482015260640161014c565b6104778c8c8c8c8a61093a565b91955093509150878410156104bb5760405162461bcd60e51b815260206004820152600a602482015269534c4950504147455f4160b01b604482015260640161014c565b868310156104f85760405162461bcd60e51b815260206004820152600a60248201526929a624a82820a3a2afa160b11b604482015260640161014c565b60408051858152602081018590529081018390526001600160a01b03808816918d8216918f16907f43c967b388d3a4ccad3f7ab80167852e322e5a3fde9893f530252281b2ae8b709060600160405180910390a450985098509895505050505050565b600061056784846105f5565b600081815260208190526040812080546001820154939450909290916105938a8a8a8a8a88888b610bbe565b604080518c8152602081018390526001600160a01b0389811682840152915192935033928a8316928c16917f06d4563a212fcb49adba35517ae64c2d9cad532d71e81d626df17a2514ecae64919081900360600190a450505050505050505050565b6000816001600160a01b0316836001600160a01b031610610654576040516bffffffffffffffffffffffff19606084811b8216602084015285901b16603482015260480160405160208183030381529060405280519060200120610694565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b166034820152604801604051602081830303815290604052805190602001205b90505b92915050565b60008060006106ac89896105f5565b600081815260208181526040808320805460018201546002830154338752600384019095529290942054949550939091908b11156107255760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b604482015260640161014c565b80610730848d611078565b61073a919061108f565b965080610747838d611078565b610751919061108f565b9550898710156107905760405162461bcd60e51b815260206004820152600a602482015269534c4950504147455f4160b01b604482015260640161014c565b888610156107cd5760405162461bcd60e51b815260206004820152600a60248201526929a624a82820a3a2afa160b11b604482015260640161014c565b868460000160008282546107e1919061110f565b92505081905550858460010160008282546107fc919061110f565b925050819055508a846002016000828254610817919061110f565b9091555050336000908152600385016020526040812080548d929061083d90849061110f565b909155505060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018990528e169063a9059cbb906044016020604051808303816000875af1158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611122565b5060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018890528d169063a9059cbb906044016020604051808303816000875af1158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190611122565b505050505050965096945050505050565b600080600080600061094e8a8a8a8a610daa565b93509350505060006109608b8b6105f5565b6000818152602081905260408120805460018201546002830154949550919390928190036109a9578699508598506109a2898b61099d9190611078565b610de9565b9750610a21565b6000836109b6848a611078565b6109c0919061108f565b905086811115610a005760405162461bcd60e51b815260206004820152600b60248201526a57524f4e475f524154494f60a81b604482015260640161014c565b879a5080995083828c610a139190611078565b610a1d919061108f565b9850505b8e6001600160a01b03166323b872dd33308d6040518463ffffffff1660e01b8152600401610a70939291906001600160a01b039384168152919092166020820152604081019190915260600190565b6020604051808303816000875af1158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190611122565b506040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038f16906323b872dd906064016020604051808303816000875af1158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190611122565b5089846000016000828254610b409190611065565b9250508190555088846001016000828254610b5b9190611065565b9250508190555087846002016000828254610b769190611065565b90915550506001600160a01b038b166000908152600385016020526040812080548a9290610ba5908490611065565b9250508190555050505050505050955095509592505050565b600080806001600160a01b03808916908a16108015610be257869250859150610be9565b8592508691505b610bf48c8484610100565b93508a841015610c3c5760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d3d555141555606a1b604482015260640161014c565b6040516323b872dd60e01b8152336004820152306024820152604481018d90526001600160a01b038b16906323b872dd906064016020604051808303816000875af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190611122565b5060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018690528a169063a9059cbb906044016020604051808303816000875af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190611122565b508015610d68578b856000016000828254610d429190611065565b9250508190555083856001016000828254610d5d919061110f565b90915550610d9b9050565b8b856001016000828254610d7c9190611065565b9091555050845484908690600090610d9590849061110f565b90915550505b50505098975050505050505050565b600080600080866001600160a01b0316886001600160a01b031610610dd25786888688610dd7565b878787875b929b919a509850909650945050505050565b60006003821115610e4a5750806000610e0360028361108f565b610e0e906001611065565b90505b81811015610e4457905080600281610e29818661108f565b610e339190611065565b610e3d919061108f565b9050610e11565b50919050565b8115610e54575060015b919050565b600080600060608486031215610e6e57600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b0381168114610e5457600080fd5b60008060008060008060a08789031215610eb557600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115610edb57600080fd5b818901915089601f830112610eef57600080fd5b813581811115610efe57600080fd5b8a60208260051b8501011115610f1357600080fd5b602083019650809550505050610f2b60608801610e85565b9150608087013590509295509295509295565b60008060408385031215610f5157600080fd5b610f5a83610e85565b9150610f6860208401610e85565b90509250929050565b600080600080600080600060e0888a031215610f8c57600080fd5b610f9588610e85565b9650610fa360208901610e85565b9550604088013594506060880135935060808801359250610fc660a08901610e85565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610ff857600080fd5b61100189610e85565b975061100f60208a01610e85565b965060408901359550606089013594506080890135935060a0890135925061103960c08a01610e85565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b808201808211156106975761069761104f565b80820281158282048414176106975761069761104f565b6000826110ac57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526013908201527214da5b5c1b1954ddd85c0e8811561412549151606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561110657600080fd5b61069482610e85565b818103818111156106975761069761104f565b60006020828403121561113457600080fd5b8151801515811461114457600080fd5b939250505056fea2646970667358221220cdbf7a5f46809450f01a8b379d064b0a4d4c366f13dde1efd0f049c2f65d3b5564736f6c63430008140033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100575760003560e01c8063054d50d41461005c57806338ed173914610082578063ac41865a14610097578063baa2abde146100aa578063e8e33700146100d2575b600080fd5b61006f61006a366004610e59565b610100565b6040519081526020015b60405180910390f35b610095610090366004610e9c565b61017b565b005b61006f6100a5366004610f3e565b610250565b6100bd6100b8366004610f71565b610304565b60408051928352602083019190915201610079565b6100e56100e0366004610fdb565b61039b565b60408051938452602084019290925290820152606001610079565b600080831180156101115750600082115b6101555760405162461bcd60e51b815260206004820152601060248201526f494e56414c49445f524553455256455360801b60448201526064015b60405180910390fd5b61015f8484611065565b6101698386611078565b610173919061108f565b949350505050565b808042111561019c5760405162461bcd60e51b815260040161014c906110b1565b600284146101ec5760405162461bcd60e51b815260206004820152601860248201527f53696d706c65537761703a20494e56414c49445f504154480000000000000000604482015260640161014c565b610247878787876000818110610204576102046110de565b905060200201602081019061021991906110f4565b8888600181811061022c5761022c6110de565b905060200201602081019061024191906110f4565b8761055b565b50505050505050565b60008061025d84846105f5565b60008181526020819052604081208054600182015493945090929091806001600160a01b03808916908a1610610294578284610297565b83835b91509150600082116102da5760405162461bcd60e51b815260206004820152600c60248201526b4e4f5f4c495155494449545960a01b604482015260640161014c565b816102ed82670de0b6b3a7640000611078565b6102f7919061108f565b9998505050505050505050565b60008082804211156103285760405162461bcd60e51b815260040161014c906110b1565b6103368a8a8a8a8a8a61069d565b60408051838152602081018390529081018b9052919450925033906001600160a01b038b811691908d16907fd765e08eef31c0983ecca03ecd166297ac485ecd5dd69e291c848f0a020333c19060600160405180910390a45097509795505050505050565b600080600083804211156103c15760405162461bcd60e51b815260040161014c906110b1565b8a6001600160a01b03168c6001600160a01b0316036104185760405162461bcd60e51b81526020600482015260136024820152724944454e544943414c5f41444452455353455360681b604482015260640161014c565b878a101580156104285750868910155b61046a5760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d05353d55395606a1b604482015260640161014c565b6104778c8c8c8c8a61093a565b91955093509150878410156104bb5760405162461bcd60e51b815260206004820152600a602482015269534c4950504147455f4160b01b604482015260640161014c565b868310156104f85760405162461bcd60e51b815260206004820152600a60248201526929a624a82820a3a2afa160b11b604482015260640161014c565b60408051858152602081018590529081018390526001600160a01b03808816918d8216918f16907f43c967b388d3a4ccad3f7ab80167852e322e5a3fde9893f530252281b2ae8b709060600160405180910390a450985098509895505050505050565b600061056784846105f5565b600081815260208190526040812080546001820154939450909290916105938a8a8a8a8a88888b610bbe565b604080518c8152602081018390526001600160a01b0389811682840152915192935033928a8316928c16917f06d4563a212fcb49adba35517ae64c2d9cad532d71e81d626df17a2514ecae64919081900360600190a450505050505050505050565b6000816001600160a01b0316836001600160a01b031610610654576040516bffffffffffffffffffffffff19606084811b8216602084015285901b16603482015260480160405160208183030381529060405280519060200120610694565b6040516bffffffffffffffffffffffff19606085811b8216602084015284901b166034820152604801604051602081830303815290604052805190602001205b90505b92915050565b60008060006106ac89896105f5565b600081815260208181526040808320805460018201546002830154338752600384019095529290942054949550939091908b11156107255760405162461bcd60e51b8152602060048201526016602482015275494e53554646494349454e545f4c495155494449545960501b604482015260640161014c565b80610730848d611078565b61073a919061108f565b965080610747838d611078565b610751919061108f565b9550898710156107905760405162461bcd60e51b815260206004820152600a602482015269534c4950504147455f4160b01b604482015260640161014c565b888610156107cd5760405162461bcd60e51b815260206004820152600a60248201526929a624a82820a3a2afa160b11b604482015260640161014c565b868460000160008282546107e1919061110f565b92505081905550858460010160008282546107fc919061110f565b925050819055508a846002016000828254610817919061110f565b9091555050336000908152600385016020526040812080548d929061083d90849061110f565b909155505060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018990528e169063a9059cbb906044016020604051808303816000875af1158015610891573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108b59190611122565b5060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018890528d169063a9059cbb906044016020604051808303816000875af1158015610905573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109299190611122565b505050505050965096945050505050565b600080600080600061094e8a8a8a8a610daa565b93509350505060006109608b8b6105f5565b6000818152602081905260408120805460018201546002830154949550919390928190036109a9578699508598506109a2898b61099d9190611078565b610de9565b9750610a21565b6000836109b6848a611078565b6109c0919061108f565b905086811115610a005760405162461bcd60e51b815260206004820152600b60248201526a57524f4e475f524154494f60a81b604482015260640161014c565b879a5080995083828c610a139190611078565b610a1d919061108f565b9850505b8e6001600160a01b03166323b872dd33308d6040518463ffffffff1660e01b8152600401610a70939291906001600160a01b039384168152919092166020820152604081019190915260600190565b6020604051808303816000875af1158015610a8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ab39190611122565b506040516323b872dd60e01b8152336004820152306024820152604481018a90526001600160a01b038f16906323b872dd906064016020604051808303816000875af1158015610b07573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b2b9190611122565b5089846000016000828254610b409190611065565b9250508190555088846001016000828254610b5b9190611065565b9250508190555087846002016000828254610b769190611065565b90915550506001600160a01b038b166000908152600385016020526040812080548a9290610ba5908490611065565b9250508190555050505050505050955095509592505050565b600080806001600160a01b03808916908a16108015610be257869250859150610be9565b8592508691505b610bf48c8484610100565b93508a841015610c3c5760405162461bcd60e51b8152602060048201526013602482015272125394d551919250d251539517d3d555141555606a1b604482015260640161014c565b6040516323b872dd60e01b8152336004820152306024820152604481018d90526001600160a01b038b16906323b872dd906064016020604051808303816000875af1158015610c8f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb39190611122565b5060405163a9059cbb60e01b81526001600160a01b038981166004830152602482018690528a169063a9059cbb906044016020604051808303816000875af1158015610d03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d279190611122565b508015610d68578b856000016000828254610d429190611065565b9250508190555083856001016000828254610d5d919061110f565b90915550610d9b9050565b8b856001016000828254610d7c9190611065565b9091555050845484908690600090610d9590849061110f565b90915550505b50505098975050505050505050565b600080600080866001600160a01b0316886001600160a01b031610610dd25786888688610dd7565b878787875b929b919a509850909650945050505050565b60006003821115610e4a5750806000610e0360028361108f565b610e0e906001611065565b90505b81811015610e4457905080600281610e29818661108f565b610e339190611065565b610e3d919061108f565b9050610e11565b50919050565b8115610e54575060015b919050565b600080600060608486031215610e6e57600080fd5b505081359360208301359350604090920135919050565b80356001600160a01b0381168114610e5457600080fd5b60008060008060008060a08789031215610eb557600080fd5b8635955060208701359450604087013567ffffffffffffffff80821115610edb57600080fd5b818901915089601f830112610eef57600080fd5b813581811115610efe57600080fd5b8a60208260051b8501011115610f1357600080fd5b602083019650809550505050610f2b60608801610e85565b9150608087013590509295509295509295565b60008060408385031215610f5157600080fd5b610f5a83610e85565b9150610f6860208401610e85565b90509250929050565b600080600080600080600060e0888a031215610f8c57600080fd5b610f9588610e85565b9650610fa360208901610e85565b9550604088013594506060880135935060808801359250610fc660a08901610e85565b915060c0880135905092959891949750929550565b600080600080600080600080610100898b031215610ff857600080fd5b61100189610e85565b975061100f60208a01610e85565b965060408901359550606089013594506080890135935060a0890135925061103960c08a01610e85565b915060e089013590509295985092959890939650565b634e487b7160e01b600052601160045260246000fd5b808201808211156106975761069761104f565b80820281158282048414176106975761069761104f565b6000826110ac57634e487b7160e01b600052601260045260246000fd5b500490565b60208082526013908201527214da5b5c1b1954ddd85c0e8811561412549151606a1b604082015260600190565b634e487b7160e01b600052603260045260246000fd5b60006020828403121561110657600080fd5b61069482610e85565b818103818111156106975761069761104f565b60006020828403121561113457600080fd5b8151801515811461114457600080fd5b939250505056fea2646970667358221220cdbf7a5f46809450f01a8b379d064b0a4d4c366f13dde1efd0f049c2f65d3b5564736f6c63430008140033",
  "devdoc": {
    "author": "Hiskander Aguillon",
    "details": "Uses a simplified constant product formula without fees.",
    "kind": "dev",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountADesired": "Amount of token A desired to add",
          "amountAMin": "Minimum amount of token A to add (slippage protection)",
          "amountBDesired": "Amount of token B desired to add",
          "amountBMin": "Minimum amount of token B to add (slippage protection)",
          "deadline": "Time after which the transaction is invalid",
          "to": "Address to receive liquidity tokens",
          "tokenA": "Address of token A",
          "tokenB": "Address of token B"
        },
        "returns": {
          "amountA": "Actual amount of token A added",
          "amountB": "Actual amount of token B added",
          "liquidity": "Amount of liquidity tokens minted"
        }
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "params": {
          "amountIn": "Amount of input tokens",
          "reserveIn": "Reserve of input token",
          "reserveOut": "Reserve of output token"
        },
        "returns": {
          "amountOut": "Calculated amount of output tokens"
        }
      },
      "getPrice(address,address)": {
        "params": {
          "tokenA": "Address of token A",
          "tokenB": "Address of token B"
        },
        "returns": {
          "price": "The price of 1 tokenA in tokenB units"
        }
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "params": {
          "amountAMin": "Minimum amount of token A to receive (slippage protection)",
          "amountBMin": "Minimum amount of token B to receive (slippage protection)",
          "deadline": "Expiry time for the transaction",
          "liquidity": "Amount of liquidity tokens to burn",
          "to": "Recipient of the withdrawn tokens",
          "tokenA": "Address of token A",
          "tokenB": "Address of token B"
        },
        "returns": {
          "amountA": "Amount of token A returned",
          "amountB": "Amount of token B returned"
        }
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "params": {
          "amountIn": "Amount of input tokens to send",
          "amountOutMin": "Minimum amount of output tokens to receive (slippage protection)",
          "deadline": "Time after which the transaction is invalid   ",
          "path": "Array with exactly 2 elements: input token and output token addresses",
          "to": "Recipient of the output tokens"
        }
      }
    },
    "title": "SimpleSwap - A simple token swap and liquidity pool contract",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LiquidityAdded(address,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity is added to a pool"
      },
      "LiquidityRemoved(address,address,address,uint256,uint256,uint256)": {
        "notice": "Emitted when liquidity is removed from a pool"
      },
      "Swap(address,address,address,uint256,uint256)": {
        "notice": "Emitted when a swap is executed"
      },
      "TokensSwapped(address,address,address,uint256,uint256,address)": {
        "notice": "Emitted when a swap is executed"
      }
    },
    "kind": "user",
    "methods": {
      "addLiquidity(address,address,uint256,uint256,uint256,uint256,address,uint256)": {
        "notice": "Add liquidity to the pool for a token pair"
      },
      "getAmountOut(uint256,uint256,uint256)": {
        "notice": "Calculates output amount given an input amount and reserves"
      },
      "getPrice(address,address)": {
        "notice": "Returns the price of tokenB in terms of tokenA (18 decimals)"
      },
      "removeLiquidity(address,address,uint256,uint256,uint256,address,uint256)": {
        "notice": "Removes liquidity from a token pair pool and returns the tokens to the user"
      },
      "swapExactTokensForTokens(uint256,uint256,address[],address,uint256)": {
        "notice": "Swaps an exact amount of input tokens for as many output tokens as possible"
      }
    },
    "notice": "This contract allows users to add/remove liquidity and swap between two ERC20 tokens.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 60,
        "contract": "contracts/SimpleSwap.sol:SimpleSwap",
        "label": "pools",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(Pool)55_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(Pool)55_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct SimpleSwap.Pool)",
        "numberOfBytes": "32",
        "value": "t_struct(Pool)55_storage"
      },
      "t_struct(Pool)55_storage": {
        "encoding": "inplace",
        "label": "struct SimpleSwap.Pool",
        "members": [
          {
            "astId": 46,
            "contract": "contracts/SimpleSwap.sol:SimpleSwap",
            "label": "reserveA",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 48,
            "contract": "contracts/SimpleSwap.sol:SimpleSwap",
            "label": "reserveB",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 50,
            "contract": "contracts/SimpleSwap.sol:SimpleSwap",
            "label": "totalLiquidity",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 54,
            "contract": "contracts/SimpleSwap.sol:SimpleSwap",
            "label": "liquidity",
            "offset": 0,
            "slot": "3",
            "type": "t_mapping(t_address,t_uint256)"
          }
        ],
        "numberOfBytes": "128"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}